/*
 * Duplication.h
 * Behavioral Attributed Automaton
 * @author Gregoire JACOB (gregoire.jacob@orange-ftgroup.com)
 * @date 01/12/2008
 * @version 2.2
 * Duplication parser automaton
 */

//Set of parallel automata for duplication
struct PARALLEL_AUTOMATA duplication;

//Set of combinatory (avoid duplicated graph)
#define DOBJECTNB 20000
char DupObjectCombin[DOBJECTNB][DOBJECTNB];

//Set of object duplicata
#define DUPLICATAMAXNB 500
int DuplicataNb;
long DuplicataIds[DUPLICATAMAXNB];
int DuplicataTypes[DUPLICATAMAXNB];


/**
 * initDuplicationAutomata()
 * Initialize the set of parallel automata as unique
 * automaton in a starting state
 */
void initDuplicationAutomata();

/**
 * parseIntermediateRules()
 * @param the first argument identifier
 * @param the first argument type		
 * @param the second argument identifier	
 * @param the second argument type	
 * Parse the given rules and updates the automata
 * satisfying the syntactic and semantic rules
 */
void parseDupCreate(long argid, int argtype);
void parseDupOpen(long argid, int argtype);
void parseDupClose(long argid, int argtype);
void parseDupRead(long arg1id, int arg1type, long arg2id, int arg2type);
void parseDupWrite(long arg1id, int arg1type, long arg2id, int arg2type);
void parseDupDirectTransfer(long arg1id, int arg1type, long arg2id, int arg2type);
void parseDupAffect(long arg1id, int arg1type, long arg2id, int arg2type);
void parseDupInterleavedBegin();
void parseDupInterleavedEnd();

/**
 * updateDuplicationAutomata()
 * @param the current operation
 * @param the first argument identifier		(optional (0))
 * @param the first argument type			(optional (0))
 * @param the second argument identifier	(optional (0))
 * @param the second argument type			(optional (0))
 * Updates the progression of the different automata according
 * to the current lexical unit. May start new automaton
 */
void updateDuplicationAutomata(unsigned long operation,
							   long arg1id, int arg1type,
							   long arg2id, int arg2type);


//Duplicata management
void addDuplicata(long objid, int objtype);
int isDuplicata(long objid, int objtype);
